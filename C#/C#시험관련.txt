C# 시험
where 쪽에서 한문제 낸다
인터럽트 abort 차이
글로벌 어셈블리 캐쉬

--------------------------
1. 열거 타입 enum (실습한거 위주 같은건 안냄)

enum 열거형식명 : 기반자료형 {상수1, 상수2, 상수3 ....}
첫번째 열거 형식 요소에는 0부터 들어가고 순차적으로 1씩 증가한다.
열거 형식의 각 요소는 서로 중복되지 않는 값을 갖고 있다는데 의미가 있다.
열거 형식은 변수가 아니라 새로운 형식이다.
원하는 값을 직접 넣으면 해당 값으로 대입되며 다음 요소는 1추가된 값이다.

2. 출력되는 결과 확인 (?관련 ?들어가는건 책에 총 3개 존재 )

-Nullable 형식
형태 : 데이터형식? 변수이름;
ex) int? a;
변수가 null값을 수용가능하도록 만드는 형식이다.
모든 Nullable 형식은 HasValue와 Value 두가지 속성을 가진다.
HasValue : bool 값을 반환. 해당 Nullable 변수가 값을 가지는지 판단해 null이면 false를 반환. 값을 가지면 true를 반환
Value : 변수 값을 받아온다. 단, null 상태의 변수에 value로 값을 받아오려고 시도하면 InvalidOperationException 예외 처리됨

-Null 조건부 연산자
형태: ?.
ex) obj?.member
객체의 멤버에 접근하기 전에 해당 객체가 null인지를 검사하여 객체가 null일 경우 null을 반환하고 그렇지 않은 경우
. 뒤에 지정된 멤버를 반환한다.
유사형태 ?[] : 동일 기능을 수행하는 연산자. 객체의 멤버 접근이 아닌 배열 같은 컬렉션 객체의 첨자를 이용한 참조에 사용

-Null 병합 연산자
형태:  ?? 
ex) a ?? b
왼쪽 피연산자 a가 null이 아닐경우 a를 반환. null일 경우 b를 반환한다.

3. most father 가장 조상 (object)
모든 데이터 형식 (기본 데이터 형식, 복합 데이터 형식, 사용자 생성 형식)이 자동으로 object 형식으로부터 상속받게 해
C#에서는 모든 데이터를 object로 다룰수 있게 됨. 즉, object 형식이 모든 데이터 형식의 조상

4. C#엔트리 포인트 메소드 main (메인의 여러가지 형태가 있을 수 있다.)
엔트리 포인트 : 진입점이란 뜻으로 프로그램 진입점은 main 메소드이다.
static void Main(string[] args)
메인 메소드 반환 형식으로 가능한것은 아래와 같다.
void , int, Task, Task<int> 

5. C# 기본 데이터 타입 .Net 데이터 타입 비교표 (잘쓰는거 위주)
클래스 이름 	C#형식	크기
System.Byte	byte	1byte
System.SByte	sbyte	1byte
System.Int16	short	2byte
System.Int32	int	4byte
System.Int64	long	8byte
System.UInt16	ushort	2byte
System.UInt32	uint	4byte
System.Uint64	ulong	8byte
System.Single	float	4byte
System.Double	double	8byte
System.Boolean	bool	1byte
System.Char	char	2byte
System.Decimal	decimal	16byte
System.String	string

6. ?관련. int 기본 데이터 타입이나 얘도 C#에서 객체다. int. 하면 프로퍼티 나오는데
minvalue maxvlue가 무엇을 의미하는지 알도록 한다.
public const int MaxValue = 2147483647;
public const int MinValue = -2147483648;
uint.MaxValue = 4294967295
overflow, underflow를 유의한다.

7. 인터페이스 구성요소. 인터페이스에는 무엇 무엇이 들어갈 수 있다.
인터페이스는 메소드, 이벤트, 프로퍼티, 인덱서만을 가질 수 있다.

8. GetEnumerator 구현을 하기 위해 하나씩 리턴해주는 것.
GetEnumerator() 메소드 구현 시 yield return 문의 도움을 받아야 한다.
yield return문은 현재 메소드의 실행을 일시 정지시켜 놓고 호출자에게 결과를 반환한다.
메소드가 다시 호출되면, 일시 정지된 실행을 복구하여 작업을 다시 실행한다.

9. C# 접근제한자 관련
접근 한정자
public	: 클래스의 내부/외부 모든 곳에서 접근 가능
protected: 클래스의 외부에서는 접근할 수 없지만, 파생 클래스에서는 접근이 가능
private	: 클래스의 내부에서만 접근할 수 있다. 파생 클래스에서도 접근이 불가
internal	: 같은 어셈블리에 있는 코드에서만 public으로 접근 가능. 다른 어셈블리 코드에서는 private와 같은 수준의 접근성
protected internal : 같은 어셈블리에 있는 코드에서만 protected로 접근 가능. 다른 어셈블리 코드에선 private 수준
private protected : 같은 어셈블리에 있는 클래스에서 상속받은 클래스 내부에서만 접근이 가능

class, 추상 class는 default 접근 제한자가 internal이다. interface는 public


10. 제네릭 타입 변수 줄때 where 중 하나 
where T : struct 		: T는 값 형식이여야 한다.
where T : class  		: T는 참조 형식이어야 한다.
where T : new() 		: T는 반드시 매개 변수가 없는 생성자가 있어야 한다.
where T : 기반 클래스 이름 	: T는 명시한 기반 클래스의 파생 클래스여야 한다.
where T : 인터페이스 이름 	: T는 명시한 인터페이스를 반드시 구현해야 한다. 여러개의 인터페이스를 명시 가능하다.
where T : U 		: T는 또다른 형식 매개 변수 U로부터 상속받은 클래스여야 한다.

11. 익명타입 관련 문제 하나
var myInstance = new { Name="사람", Age = "17"};
무명형식은 형식의 선언과 동시에 인스턴스를 할당.
무명형식의 프로퍼티에 할당된 값은 변경이 불가능하다. 읽기만 가능

12. new 해서 객체 생성 하는것 관련 문제
new로 생성 못하는것 : 인터페이스 , 추상클래스, 
솔직히 이건 뭐나올지 모르겠다.

13. 상속과 생성자 관련
상속관련 기능
sealed : sealed 한정자로 클래스를 수식하면 상속 봉인이 되어 해당 클래스 상속 시도할 경우 에러 발생

연산자 is, as
is : 객체가 해당 형식에 해당하는지를 검사하여 결과를 bool값으로 반환
as : 형식 변환 연산자와 같은 역할을 한다. 형변환 연산자가 실패시 예외 던지는 반면 as는 객체 참조를 null로 만든다.

virtual 키워드
: 가상 메소드로 설정해서 메소드 오버라이딩이 가능하게 해준다.
new
: 메소드 숨기기용으로 파생클래스 버전의 메소드를 new 한정자로 수식함으로 가능. 기반 클래스 구현 메소드를
감추고 파생 클래스 메소드만을 나타나게한다

14. 스레드 중지 하는 3가지 방법. 아닌것을 고르기
Abort()	: 메소드 호출 시 코드에 ThreadAbortException을 호출한다. catch, finally 거쳐서 종료된다.
	 자원 독점을 해제하지 않고 죽는 경우와 여러 문제가 있어서 권하지 않는 방법
Interrput(): 스레드가 동작중인 상태를 피해서 WaitJoinSleep 상태에 들어갔을 때 ThreadInterruptedException 예외를 던져
	스레드를 중지시킨다. 이러한 특징 덕분에 중단되면 안되는 작업시, 중단이 되지 않는다는 보장을 받을 수 있다.
flag 사용.

15~19스레드 task 관련 문제 5개
Task 클래스 : 병행성 코드, 비동기 코드 작성 지원
fire(or shoot) and forget : 비동기 코드의 동작을 묘사할 때 자주 쓰이는 표현. 화살을 쏘는 것 처럼 화살을 쏘고 바로 다음 화살을 준비하는것처럼
			 메소드를 호출한 뒤에 메소드의 종료를 기다리지 않고 바로 다음 코드를 실행하는 형태

new Task(Action) : Task 클래스는 인스턴스를 생성할 때 Action 대리자 (반환형을 갖지 않는 메소드와 익명 메소드, 무명 함수 등)를 넘겨받는다.
Task.Start() : Task를 시작하고 현재 TaskScheduler에 실행을 예약한다. 
Task.Run()  : 지정한 작업을 스레드 풀에서 실행하도록 큐에 대기시키고 작업을 나타내는 Task 개체를 반환한다.
예제들로 보아 start는 new Task로 만들고 실행하는 반면 run은 무명함수로 바로 만들어서 실행하고 반환값을 받는다.
Task<TResult>클래스 : 코드의 비동기 실행 결과를 손쉽게 취합할 수 있도록 도와줌
Parallel.For(from, to, Method) : 병렬 처리 지원. from에서 to까지의 정수를 메소드의 매개변수로 넘긴다. 별렬 호출 시 쓰레드 사용 갯수는 
			   Parallel 클래스가 내부적으로 판단해서 최적화한다.
async 한정자 : 메소드 이벤트 처리기, 태스크 , 람다식 등을 수식함으로 컴파일러가 이들을 호출하는 코드를 만날 때 호출
	      결과를 기다리지 않고 바로 다음 코드로 이동하도록 실행코드를 생성하게 한다.
async로 한정하는 메소드는 반환형식이 Task, Task<TResult>, void 이여야만 한다
await 연산자 : async로 한정된 메소드 내부에서 await 지점에서 호출자에게 제어를 돌려준다. 호출자다음 코드와 await 다음 코드가 동시에 실행된다.

- async와 await 알아보기 쉽게 그림 설명
void Caller()
{
 ...
 ↓(1)		(2)		
 method( )	->      async void method()
 ↓(5)		         {
 ...			↓(3)
}		(4)         ...
		↖	await Task.run(async() => ...
			↓(5)
		            ...

		          }


20 어셈블리 dll
글로벌 어셈블리 캐쉬라는 영역이 존재.
기존 dll을 구분하는 기분이 파일명이라 문제가 발생. 이를 보완하고자 닷넷에서는 파일명 + 버전 + 컬처 + 공개키 토큰 을 조합한 어셈블리를 
생성하고 이러한 어셈블리만이 배포될 수 있는 컴퓨터 저장소(GAC : Global Assembly Cahche)를 별도로 마련함. 
서명이 존재하는 dll만 등록이 가능하다. key 파일이 존재하면 자유롭게 dll 
수정가능 128비트 암호화 되어있으므로 해킹도 힘듬